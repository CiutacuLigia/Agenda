@page "/utilizators"
@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using Agenda.Components.Data


<PageTitle>Agenda</PageTitle>

<h1>Contacte</h1>

<div >
	<!-- Căutare -->
	<div>
		<div class="w-25 mb-3 center">
			<input type="text" @bind="searchQuery" placeholder="Search..." class="form-control mb-2" />

		</div>
		<div>
			<button class="btn btn-primary " @onclick="SearchUtilizatori">Search</button>
			<button class="btn btn-success " data-bs-toggle="modal" data-bs-target="#addUserModal">Create New</button>
		</div>



	</div>





	<!-- Modal pentru Adaugare Utilizator -->
	<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="addUserModalLabel">Adaugă Utilizator Nou</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Închide"></button>
				</div>
				<div class="modal-body">
					<EditForm method="post" Model="Utilizator" OnValidSubmit="AddUtilizator" FormName="create" Enhance>
						<DataAnnotationsValidator />
						<ValidationSummary class="text-danger" role="alert" />

						<div class="mb-3">
							<label for="nume" class="form-label">Nume</label>
							<InputText id="nume" @bind-Value="Utilizator.Nume" class="form-control" />
							<ValidationMessage For="() => Utilizator.Nume" class="text-danger" />
						</div>

						<div class="mb-3">
							<label for="prenume" class="form-label">Prenume</label>
							<InputText id="prenume" @bind-Value="Utilizator.Prenume" class="form-control" />
							<ValidationMessage For="() => Utilizator.Prenume" class="text-danger" />
						</div>

						<div class="mb-3">
							<label for="telefon" class="form-label">Telefon</label>
							<InputText id="telefon" @bind-Value="Utilizator.Telefon" class="form-control" />
							<ValidationMessage For="() => Utilizator.Telefon" class="text-danger" />
						</div>
						@if (!string.IsNullOrEmpty(errorMessage))
						{
							<p class="alert alert-danger">@errorMessage</p>
						}

						<div class="mb-3">
							<label for="birthday" class="form-label">Data nașterii</label>
							<InputDate id="birthday" @bind-Value="Utilizator.Birthday" class="form-control" />
							<ValidationMessage For="() => Utilizator.Birthday" class="text-danger" />
						</div>

						<div class="mb-3">
							<label for="observatie" class="form-label">Observații</label>
							<InputText id="observatie" @bind-Value="Utilizator.Observatie" class="form-control" />
							<ValidationMessage For="() => Utilizator.Observatie" class="text-danger" />
						</div>

						<div class="mb-3">
							<label for="relatie" class="form-label">Relație</label>
							<InputSelect id="relatie" @bind-Value="Utilizator.Relatie" class="form-control">
								<option value="">Alege relația</option>
								<option value="Mama">Mama</option>
								<option value="Tata">Tata</option>
								<option value="Frate">Frate</option>
								<option value="Sora">Sora</option>
								<option value="Cumnat">Cumnat</option>
								<option value="Cumnata">Cumnata</option>
								<option value="Var">Var</option>
								<option value="Verișoară">Verișoară</option>
								<option value="Unchi">Unchi</option>
								<option value="Nora">Nora</option>
								<option value="Ginere">Ginere</option>
								<option value="Prieten">Prieten</option>
								<option value="Coleg">Coleg</option>
								<option value="Altele">Altele</option>
							</InputSelect>
							<ValidationMessage For="() => Utilizator.Relatie" class="text-danger" />
						</div>


						<button type="submit" class="btn btn-primary">Adaugă</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>


	<!--modalul de editare-->
	@if (IsEditMode)
	{
		<div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
			<div class="modal-dialog modal-lg modal-dialog-centered">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Editează Utilizator</h5>
						<button type="button" class="btn-close" @onclick="InchideEditModal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<EditForm Model="UtilizatorEditat" OnValidSubmit="SalveazaModificari">
							<DataAnnotationsValidator />
							<ValidationSummary />

							<div class="mb-3">
								<label>Nume</label>
								<InputText class="form-control" @bind-Value="UtilizatorEditat.Nume" />
							</div>
							<div class="mb-3">
								<label>Prenume</label>
								<InputText class="form-control" @bind-Value="UtilizatorEditat.Prenume" />
							</div>
							<div class="mb-3">
								<label>Telefon</label>
								<InputText class="form-control" @bind-Value="UtilizatorEditat.Telefon" />
							</div>
							<div class="mb-3">
								<label>Data nașterii</label>
								<InputDate class="form-control" @bind-Value="UtilizatorEditat.Birthday" />
							</div>
							<div class="mb-3">
								<label>Observații</label>
								<InputText class="form-control" @bind-Value="UtilizatorEditat.Observatie" />
							</div>
							<div class="mb-3">
								<label>Relație</label>
								<InputSelect class="form-control" @bind-Value="UtilizatorEditat.Relatie">
									<option value="">Alege relația</option>
									<option value="Mama">Mama</option>
									<option value="Tata">Tata</option>
									<option value="Frate">Frate</option>
									<option value="Sora">Sora</option>
									<option value="Cumnat">Cumnat</option>
									<option value="Cumnata">Cumnata</option>
									<option value="Var">Var</option>
									<option value="Verișoară">Verișoară</option>
									<option value="Unchi">Unchi</option>
									<option value="Nora">Nora</option>
									<option value="Ginere">Ginere</option>
									<option value="Prieten">Prieten</option>
									<option value="Coleg">Coleg</option>
									<option value="Altele">Altele</option>
								</InputSelect>
							</div>

							<button type="submit" class="btn btn-primary">Salvează</button>
						</EditForm>
					</div>
				</div>
			</div>
		</div>
	}



</div>







<!-- Gridul cu utilizatori -->
<QuickGrid Class="table" Items="utilizatori.AsQueryable()">
	<PropertyColumn Property="utilizator => utilizator.Nume" />
	<PropertyColumn Property="utilizator => utilizator.Prenume" />
	<PropertyColumn Property="utilizator => utilizator.Telefon" />
	<PropertyColumn Property="utilizator => utilizator.Birthday" Title="Data Nasterii" Format="dd/MM/yyyy" />
	<PropertyColumn Property="utilizator => utilizator.Observatie" />
	<PropertyColumn Property="utilizator => utilizator.Relatie" />

	<TemplateColumn Context="utilizator">
		<button type="button" class="btn-sm  btn-primary " @onclick="@(() => DeschideEditModal(utilizator))">Edit</button> ||
		<button type="button" class="btn-sm  btn-primary " href="@($"/utilizators/details/{utilizator.Id}")">Details</button>||
		<button type="button" class="btn-sm  btn-primary" href="@($"utilizators/delete/{utilizator.Id}")">Delete</button>
	</TemplateColumn>
</QuickGrid>








@code {
	private string errorMessage = string.Empty;
	private List<utilizator> utilizatori = new List<utilizator>();
	private string searchQuery = string.Empty;
	private utilizator UtilizatorEditat { get; set; } = new();
	private bool IsEditMode { get; set; } = false;

	// private int numar = 0;
	

	private utilizator Utilizator { get; set; } = new();

	// To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
	private async Task AddUtilizator()
	{
		
		bool numarExistent = await Task.Run(() => DatabaseHelper.NumarExistent(Utilizator.Telefon));
		if(numarExistent){
			errorMessage = "Numărul de telefon există deja!";
			return;
		}

		// Adaugă utilizatorul
		await DatabaseHelper.AddUtilizator(Utilizator);

		// Redirecționează utilizatorul
		NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
		Utilizator = new utilizator(); // Reset formular


	}


	protected override async Task OnInitializedAsync()
	{
	
		await LoadUtilizatoriAsync();
	}

	private async Task LoadUtilizatoriAsync()
	{
		var totiUtilizatorii = await DatabaseHelper.GetAllUtilizatoriAsync();

		if (string.IsNullOrWhiteSpace(searchQuery))
		{
			utilizatori = totiUtilizatorii;
		}
		else
		{
			utilizatori = totiUtilizatorii
				.Where(u =>
					(!string.IsNullOrEmpty(u.Nume) && u.Nume.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
					(!string.IsNullOrEmpty(u.Prenume) && u.Prenume.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
				.ToList();
		}
	}


	private async Task SearchUtilizatori()
	{
		await LoadUtilizatoriAsync();  
		StateHasChanged();  
	}

	private void DeschideEditModal(utilizator utilizator)
	{
		UtilizatorEditat = new utilizator
			{
				Id = utilizator.Id,
				Nume = utilizator.Nume,
				Prenume = utilizator.Prenume,
				Telefon = utilizator.Telefon,
				Birthday = utilizator.Birthday,
				Observatie = utilizator.Observatie,
				Relatie = utilizator.Relatie
			};

		IsEditMode = true;
	}

	private async Task SalveazaModificari()
	{
		await DatabaseHelper.UpdateUtilizator(UtilizatorEditat);
		IsEditMode = false;

		await LoadUtilizatoriAsync(); // reîncarcă lista
		StateHasChanged();
	}

	private void InchideEditModal()
	{
		IsEditMode = false;
	}


	public async ValueTask DisposeAsync()
	{
		// Nu este nimic de curățat momentan
		await Task.CompletedTask;
	}

}
