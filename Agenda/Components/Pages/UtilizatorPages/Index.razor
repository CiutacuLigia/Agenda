@page "/utilizators"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Agenda.Models
@using Agenda.Data
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IDbContextFactory<Agenda.Data.AgendaContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Agenda</PageTitle>

<h1>Contacte</h1>

<div class="d-flex flex-row align-start gap-5">
	<!-- Căutare -->
	<div class="p-2 flex-grow-1">
		<div class="mb-3 ">
			<input type="text" @bind="searchQuery" placeholder="Search..." class="form-control mb-2" />

		</div>
		<div class="text-center">
			<button class="btn btn-primary w-50 mb-2" @onclick="SearchUtilizatori">Search</button>
			<button class="btn btn-primary w-50" @onclick="CreareUtilizator">Create New</button>
		</div>



	</div>





	<div class= "@vizibilitate flex-grow-1" >


		<div class="card p-2 shadow-sm text-center" style="max-width: 700px; margin: auto;">
			<EditForm method="post" Model="Utilizator" OnValidSubmit="AddUtilizator" FormName="create" Enhance>
				<DataAnnotationsValidator />
				<ValidationSummary class="text-danger" role="alert" />

				<div class="row justify-content-center mb-2">
					<div class=" col-md-4">
						<label for="nume" class="form-label">Nume:</label>
						<InputText id="nume" @bind-Value="Utilizator.Nume" class="form-control form-control-sm" />
						<ValidationMessage For="() => Utilizator.Nume" class="text-danger" />
					</div>
					<div class=" col-md-4">
						<label for="prenume" class="form-label">Prenume:</label>
						<InputText id="prenume" @bind-Value="Utilizator.Prenume" class="form-control form-control-sm" />
						<ValidationMessage For="() => Utilizator.Prenume" class="text-danger" />
					</div>
				
					<div class="col-md-4">
						
						<label for="telefon" class="form-label">Telefon:</label>
						<InputText id="telefon" @bind-Value="Utilizator.Telefon" class="form-control form-control-sm" />
						<ValidationMessage For="() => Utilizator.Telefon" class="text-danger" />
					</div>
				</div>
				@if (!string.IsNullOrEmpty(errorMessage))
				{
					<p class="alert alert-danger">@errorMessage</p>
				}

				<div class="row justify-content-center mb-2">
					<div class="col-md-4">
						<label for="birthday" class="form-label">Birthday:</label>
						<InputDate id="birthday" @bind-Value="Utilizator.Birthday" class="form-control form-control-sm" />
						<ValidationMessage For="() => Utilizator.Birthday" class="text-danger" />
					</div>
					<div class="col-md-4">
						<label for="observatie" class="form-label">Observatie:</label>
						<InputText id="observatie" @bind-Value="Utilizator.Observatie" class="form-control form-control-sm" />
						<ValidationMessage For="() => Utilizator.Observatie" class="text-danger" />
					</div>
				</div>

				<button type="submit" class="btn btn-primary">Create</button>
			</EditForm>
		</div>
	</div>

</div>







<!-- Gridul cu utilizatori -->
<QuickGrid Class="table" Items="utilizatori.AsQueryable()">
	<PropertyColumn Property="utilizator => utilizator.Nume" />
	<PropertyColumn Property="utilizator => utilizator.Prenume" />
	<PropertyColumn Property="utilizator => utilizator.Telefon" />
	<PropertyColumn Property="utilizator => utilizator.Birthday" Title="Data Nasterii" Format="dd/MM/yyyy" />
	<PropertyColumn Property="utilizator => utilizator.Observatie" />

	<TemplateColumn Context="utilizator">
		<a href="@($"utilizators/edit?id={utilizator.Id}")">Edit</a> |
		<a href="@($"utilizators/details?id={utilizator.Id}")">Details</a> |
		<a href="@($"utilizators/delete?id={utilizator.Id}")">Delete</a>
	</TemplateColumn>
</QuickGrid>








@code {
	private string errorMessage = string.Empty;
	private AgendaContext context = default!;
	private List<Utilizator> utilizatori = new List<Utilizator>();
	private string searchQuery = string.Empty;
	private int numar = 0;
	private string vizibilitate = "invisible";


	[SupplyParameterFromForm]
	private Utilizator Utilizator { get; set; } = new();

	// To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
	private async Task AddUtilizator()
	{
		using var context = DbFactory.CreateDbContext();
		
		bool numarExistent = await context.Utilizator.AnyAsync(u => u.Telefon == Utilizator.Telefon);
		if(numarExistent){
			errorMessage = "Numărul de telefon există deja!";
			return;
		}

		context.Utilizator.Add(Utilizator);
		await context.SaveChangesAsync();
		vizibilitate = "invisible";

		NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

	}


	protected override async Task OnInitializedAsync()
	{
		// Crează contextul la inițializare
		context = DbFactory.CreateDbContext();
		await LoadUtilizatoriAsync();
	}

	private async Task LoadUtilizatoriAsync()
	{
		// Încarcă toți utilizatorii sau doar cei care corespund căutării
		if (string.IsNullOrEmpty(searchQuery))
		{
			utilizatori = await context.Utilizator.ToListAsync();
		}
		else
		{
			utilizatori = await context.Utilizator
				.Where(u => u.Nume.Contains(searchQuery) || u.Prenume.Contains(searchQuery))
				.ToListAsync();
		}
	}

	private async Task SearchUtilizatori()
	{
		await LoadUtilizatoriAsync();  
		StateHasChanged();  
	}



	public async ValueTask DisposeAsync()
	{
		// Curăță resursele când componenta este distrusă
		await context.DisposeAsync();
	}

	
	private void CreareUtilizator(MouseEventArgs e)
	{
		vizibilitate = "visible";
	}
}
