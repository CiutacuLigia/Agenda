@page "/utilizators"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Agenda.Models
@using Agenda.Data
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IDbContextFactory<Agenda.Data.AgendaContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Agenda</PageTitle>

<h1>Contacte</h1>

<div >
	<!-- Căutare -->
	<div>
		<div class="w-25 mb-3 center">
			<input type="text" @bind="searchQuery" placeholder="Search..." class="form-control mb-2" />

		</div>
		<div>
			<button class="btn btn-primary " @onclick="SearchUtilizatori">Search</button>
			<button class="btn btn-success " data-bs-toggle="modal" data-bs-target="#addUserModal">Create New</button>
		</div>



	</div>





	<!-- Modal pentru Adaugare Utilizator -->
	<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="addUserModalLabel">Adaugă Utilizator Nou</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Închide"></button>
				</div>
				<div class="modal-body">
					<EditForm method="post" Model="Utilizator" OnValidSubmit="AddUtilizator" FormName="create" Enhance>
						<DataAnnotationsValidator />
						<ValidationSummary class="text-danger" role="alert" />

						<div class="mb-3">
							<label for="nume" class="form-label">Nume</label>
							<InputText id="nume" @bind-Value="Utilizator.Nume" class="form-control" />
							<ValidationMessage For="() => Utilizator.Nume" class="text-danger" />
						</div>

						<div class="mb-3">
							<label for="prenume" class="form-label">Prenume</label>
							<InputText id="prenume" @bind-Value="Utilizator.Prenume" class="form-control" />
							<ValidationMessage For="() => Utilizator.Prenume" class="text-danger" />
						</div>

						<div class="mb-3">
							<label for="telefon" class="form-label">Telefon</label>
							<InputText id="telefon" @bind-Value="Utilizator.Telefon" class="form-control" />
							<ValidationMessage For="() => Utilizator.Telefon" class="text-danger" />
						</div>
						@if (!string.IsNullOrEmpty(errorMessage))
						{
							<p class="alert alert-danger">@errorMessage</p>
						}

						<div class="mb-3">
							<label for="birthday" class="form-label">Data nașterii</label>
							<InputDate id="birthday" @bind-Value="Utilizator.Birthday" class="form-control" />
							<ValidationMessage For="() => Utilizator.Birthday" class="text-danger" />
						</div>

						<div class="mb-3">
							<label for="observatie" class="form-label">Observații</label>
							<InputText id="observatie" @bind-Value="Utilizator.Observatie" class="form-control" />
							<ValidationMessage For="() => Utilizator.Observatie" class="text-danger" />
						</div>

						<div class="mb-3">
							<label for="relatie" class="form-label">Relație</label>
							<InputSelect id="relatie" @bind-Value="Utilizator.Relatie" class="form-control">
								<option value="">Alege relația</option>
								<option value="Mama">Mama</option>
								<option value="Tata">Tata</option>
								<option value="Frate">Frate</option>
								<option value="Sora">Sora</option>
								<option value="Cumnat">Cumnat</option>
								<option value="Cumnata">Cumnata</option>
								<option value="Var">Var</option>
								<option value="Verișoară">Verișoară</option>
								<option value="Unchi">Unchi</option>
								<option value="Nora">Nora</option>
								<option value="Ginere">Ginere</option>
								<option value="Prieten">Prieten</option>
								<option value="Coleg">Coleg</option>
								<option value="Altele">Altele</option>
							</InputSelect>
							<ValidationMessage For="() => Utilizator.Relatie" class="text-danger" />
						</div>


						<button type="submit" class="btn btn-primary">Adaugă</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>


</div>







<!-- Gridul cu utilizatori -->
<QuickGrid Class="table" Items="utilizatori.AsQueryable()">
	<PropertyColumn Property="utilizator => utilizator.Nume" />
	<PropertyColumn Property="utilizator => utilizator.Prenume" />
	<PropertyColumn Property="utilizator => utilizator.Telefon" />
	<PropertyColumn Property="utilizator => utilizator.Birthday" Title="Data Nasterii" Format="dd/MM/yyyy" />
	<PropertyColumn Property="utilizator => utilizator.Observatie" />
	<PropertyColumn Property="utilizator => utilizator.Relatie" />

	<TemplateColumn Context="utilizator">
		<a href="@($"utilizators/edit?id={utilizator.Id}")">Edit</a> |
		<a href="@($"utilizators/details?id={utilizator.Id}")">Details</a> |
		<a href="@($"utilizators/delete?id={utilizator.Id}")">Delete</a>
	</TemplateColumn>
</QuickGrid>








@code {
	private string errorMessage = string.Empty;
	private AgendaContext context = default!;
	private List<Utilizator> utilizatori = new List<Utilizator>();
	private string searchQuery = string.Empty;
	private int numar = 0;
	


	[SupplyParameterFromForm]
	private Utilizator Utilizator { get; set; } = new();

	// To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
	private async Task AddUtilizator()
	{
		using var context = DbFactory.CreateDbContext();
		
		bool numarExistent = await context.Utilizator.AnyAsync(u => u.Telefon == Utilizator.Telefon);
		if(numarExistent){
			errorMessage = "Numărul de telefon există deja!";
			return;
		}

		context.Utilizator.Add(Utilizator);
		await context.SaveChangesAsync();

		NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

	}


	protected override async Task OnInitializedAsync()
	{
		// Crează contextul la inițializare
		context = DbFactory.CreateDbContext();
		await LoadUtilizatoriAsync();
	}

	private async Task LoadUtilizatoriAsync()
	{
		// Încarcă toți utilizatorii sau doar cei care corespund căutării
		if (string.IsNullOrEmpty(searchQuery))
		{
			utilizatori = await context.Utilizator.ToListAsync();
		}
		else
		{
			utilizatori = await context.Utilizator
				.Where(u => u.Nume.Contains(searchQuery) || u.Prenume.Contains(searchQuery))
				.ToListAsync();
		}
	}

	private async Task SearchUtilizatori()
	{
		await LoadUtilizatoriAsync();  
		StateHasChanged();  
	}



	public async ValueTask DisposeAsync()
	{
		// Curăță resursele când componenta este distrusă
		await context.DisposeAsync();
	}

}
