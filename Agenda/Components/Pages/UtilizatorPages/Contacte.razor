@page "/contacte/{Categorie}"
@using Agenda.Components.Data
@using Agenda.Models
@inject ILogger<Contacte> Logger

<h3>@Categorie</h3>

@if (utilizatoriFiltrati.Any())
{
    <ul class="list-group">
        @foreach (var user in utilizatoriFiltrati)
        {
            <li class="list-group-item">
                <strong>@user.Nume @user.Prenume</strong> - @user.Telefon <br />
                <em>Observație:</em> @user.Observatie <br />
                <em>Relație:</em> @user.Relatie
            </li>
        }
    </ul>
}
else
{
    <p>Nu există utilizatori în această categorie.</p>
}

@code {
    [Parameter]
    public string? Categorie { get; set; }

    private List<utilizator> utilizatoriFiltrati = new();
    private readonly List<string> familieKeywords = new()
    {
        "var", "frate", "sora", "cumnat", "cumnata", "mama", "tata",
        "verisor", "verisoara", "unchi", "nora", "ginere"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var totiUtilizatorii = await DatabaseHelper.GetAllUtilizatoriAsync();

            if (Categorie?.ToLower() == "familie")
            {
                utilizatoriFiltrati = totiUtilizatorii
                    .Where(u => u.Relatie != null &&
                                familieKeywords.Contains(u.Relatie.ToLower()))
                    .ToList();
            }
            else // cunoștințe, prieteni sau orice altceva
            {
                utilizatoriFiltrati = totiUtilizatorii
                    .Where(u => string.IsNullOrEmpty(u.Relatie) ||
                                !familieKeywords.Contains(u.Relatie.ToLower()))
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Eroare la încărcarea utilizatorilor.");
        }
    }
}

